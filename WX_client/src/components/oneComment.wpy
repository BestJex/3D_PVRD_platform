<style lang="scss">
.one-comment {
  height: auto;
  margin-bottom: 20px;
  border-radius: 5px;
  background-color: #515151;
  padding: 5px 10px;
}
.one-comment text {
  color: white;
}
.one-comment-head {
  height: 24px;
}
.avatar {
  width: 24px;
  height: 24px;
  border-radius: 12px;
  float: left;
}
.publisher {
  margin-left: 5px;
  font-size: 12px;
  line-height: 24px;
  float: left;
}
.releaseTime {
  font-size: 12px;
  font-weight: 200;
  line-height: 24px;
  float: right;
}
.commentContent {
  margin-left: 26px;
  font-size: 12px;
  font-weight: 200;
  width: 100%;
}
.one-comment-replyList {
  margin-top: 10px;
  font-size: 11px;
  margin-left: 26px;
}
.one-reply {
  margin-bottom: 10px;
}
</style>
<template>
  <view class="one-comment" @tap="inputFocus({{id}},{{publisher}})">
    <view class="one-comment-head">
      <image class="avatar" src="{{avatar}}"></image>
      <text class="publisher">{{publisher}}</text>
      <text class="releaseTime">{{releaseTime}}</text>
    </view>
    <view class="one-comment-content">
      <text class="commentContent">{{commentContent}}</text>
    </view>
    <view class="one-comment-replyList">
      <repeat for="{{replyList}}" key="index" index="index" item="item">
        <view class="one-reply" catchtap="inputFocus({{item.commentId}},{{item.userAName}})">
          <text>{{item.userAName}}@{{item.userBName}}ï¼š{{item.subCommentContent}}</text>
        </view>
      </repeat>
    </view>
  </view>
</template>
<script>
import wepy from "wepy";

export default class OneComment extends wepy.component {
  props = {
    id: Number,
    avatar: String,
    publisher: String,
    releaseTime: String,
    commentContent: String,
    replyList: Array
  };

  data = {
    releaseT: ""
  };
  events = {};

  watch = {};

  methods = {
    inputFocus(commentId, publisher) {
      this.$emit("inputFocus", commentId, publisher);
    }
  };
  onLoad() {
    // console.log(this.id,this.releaseTime);
    // if (typeof this.props.releaseTime == "number") {
    //   let newDate = new Date();
    //   newDate.setTime(this.props.releaseTime * 1000);
    //   this.releaseT = newDate.toISOString().slice(0,16);
    //   this.$apply();
    // }
  }
}
</script>
